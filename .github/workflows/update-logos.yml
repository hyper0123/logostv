name: Update Logos Database

on:
  push:
    paths:
      - 'logos/**'  # Se activa cuando se modifican archivos en el directorio logos

jobs:
  update-logos-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Permiso para hacer commit
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Generate Logos JSON
      run: |
        # Crear el archivo JSON si no existe
        if [ ! -f logos.json ]; then
          echo '{}' > logos.json
        fi

        # Instalar dependencias
        python -m pip install PyGithub

        # Ejecutar script de actualización
        python - <<EOF
        import os
        import json
        import glob
        from github import Github

        # Configuración
        REPO_NAME = os.environ['GITHUB_REPOSITORY']
        LOGOS_DIR = 'logos'
        JSON_FILE = 'logos.json'
        GITHUB_TOKEN = os.environ['GITHUB_TOKEN']

        # Obtener archivos modificados
        added_files = []
        if os.environ.get('GITHUB_EVENT_NAME') == 'push':
            event_path = os.environ['GITHUB_EVENT_PATH']
            with open(event_path) as f:
                event = json.load(f)
            for commit in event.get('commits', []):
                added_files.extend(commit.get('added', []))

        # Cargar JSON existente
        with open(JSON_FILE, 'r') as f:
            logos_db = json.load(f)

        # Procesar nuevas imágenes
        updated = False
        for file in added_files:
            if file.startswith(f"{LOGOS_DIR}/") and file.split('.')[-1].lower() in ['png', 'jpg', 'jpeg', 'webp']:
                channel_name = os.path.splitext(os.path.basename(file))[0]
                raw_url = f"https://raw.githubusercontent.com/{REPO_NAME}/main/{file}"
                
                # Agregar al JSON si no existe
                if channel_name not in logos_db:
                    logos_db[channel_name] = raw_url
                    print(f"Added: {channel_name} -> {raw_url}")
                    updated = True

        # Guardar cambios
        if updated:
            with open(JSON_FILE, 'w') as f:
                json.dump(logos_db, f, indent=2)
            print("Logos database updated!")
        else:
            print("No new logos to add")
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit Changes
      if: success()
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add logos.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Actualizar base de datos de logos"
        git push
